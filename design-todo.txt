I'm going to use "interface" instead of "typeclass", and for constraints I'll use the syntax
<arg list> | <constraint list>
as in
interface A a | B a { ... }
f<a, b, c | A a, B b, C c, D a b>(x : a, y : b) -> c = { ... }

Here, "A b | ..." looks slightly different than "a, b, c | ..." because it looks like
in the former | has an interface name and type argument on the left (A a), whereas in the last_to_return
we just have a list of arguments, but this is not the case. The former is really
interface A (a | B a) { ... }
so in both cases it's <arg list> | <constraint list>.






something like:
typeclass num t {}
instance num int32 {} 
instance num int64 {}
instance num float32 {}
instance num float64 {}
typeclass (num t) => add t { _+_ :: t -> t -> t }
instance add int32 where { _+_ = int32::_+_ }
instance add int64 where { _+_ = int64::_+_ }
instance add float32 where { _+_ = float32::_+_ }
instance add float64 where { _+_ = float64::_+_ }
?


union numerics = Union<Int32, Int64, Float32, Float64>

numerics t => add(t x, t y) -> t = {
  match numerics(t)
  | Int32 -> Int32::+(x, y)
  | Int64 -> Int64::+(x, y)
  | Float32 -> Float32::+(x, y)
  | Float64 -> Float64::+(x, y)
}

typeclass numeric_tc t {
  _add(t, t) -> t
  _mul(t, t) -> t
  _neg(t, t) -> t
  _sub(t, t) -> t
}

instance numeric_tc Int32 {
  _add = Int32::+
  _mul = Int32::+
  _neg = Int32::+
  _sub = Int32::+
}

Int32 a = 1;
Int32 b = 2;

printf("%d\n", add(a, b));
printf("%d\n", _add(a, b));

typeof(add) == Union<numerics> t => t -> t -> t
typeof(_add) == typeclass<numeric_tc> t => t -> t -> t





todo:
properly deduce function type in to_fndef (if type is explicitly given)
implement last_to_return
implement if-then-else emitting
add typing to everything
implement let
implement scoping
 - add variables in lets to scope
 - add function argument variables to scope


TODO: fix makefile -- seems to recompile a lot of things that shouldn't need to be recompiled
TODO: also make release and debug separate targets

TODO: think I broke SyntaxNode::to_string (Maybe just fn_def doesn't work?)

TODO:
  I really have to change SyntaxNode into a class hierarchy so I can create
  more expressive names for child nodes instead of just `children[0]`, etc.

TODO: for some reason functions are emitted as blocks in blocks instead of just
      blocks

TODO:
  write my own testing software for C++

TODO (design consideration):
  using `:` without a space is a syntax error... do I want that?


add types to expression

In order to check whether the function always returns the right value type... just check all returns in the function.
  we can build a function.returns vector when we create the function AST node.


TODO(BUG): The programs like `{ 1 + 1 }`, and `{ 1 + 1; 1 + 1 } don't compile
  correctly. The last line in the block is not being treated as a return
  statement. I think I probably just have to `last_to_return` on `main_fn` in
  `compiler`?

if expr is block-expr, we need to make block-expr into a void function...
  unless if-expr is returning, or using its value...

we should maybe have 2 block AST types:
  block
  block-with-value

TODO: there is a fairly serious inconsistency/unintended behaviour in the parser
      in that expressions only stop when they meet a token with lower precedence (or something like that, not 100% sure)
      than the current expression, meaning for example "1 + 1 2 + 2" is actually
      a valid way of writing two expressions in sequence instead of being forced
      to write "1 + 1; 2 + 2". IDK if I want this behaviour or not...

TODO: implement compound datatypes


TODO: add module system
TODO: add global variables properly scoped by module


TODO: add more tests (always)

TODO: ... memory management (actually free stuff lol)

implement variables
 -- variable definition
 -- variable assignment

implement type inference for variables and functions (return types)

implement type checking


change Cemitter to emit to stream argument instead of std::out

change all headers to pimpl




TODO: add some way to set syntax chars

I'm not sure if I want 'logical negation' to be represented by '!' or 'not'.
I'm thinking of including ! on ints as well as not on bools. For logic using 
ints we can just do 'if nonzero x' or something.


function syntaxes:
(1)
f : (x : int) -> (y : int) -> int = x + y if {x, y} > 0 else 0

(2)
f(x, y) = x + y if {x, y} > 0 else 0

(3)
f(x : int, y : int) -> int = { x + y if {x, y} > 0 else 0 }



if syntax:
return if true then 1 -- X malformed (need then on return) (?)

if true then 1 else false
if true then {print "hi"; 1} else {print "bye"; 2}


f_001 = {print "hi"; 1}
f_002 = {print "bye"; 2}


if true then {print "hi"; 1} else {print "bye"; 2}
(true) ? f_001() : f_002


return if true then {print "hi"; 1} else {print "bye"; 2}
return ((true) ? f_001() : f_002)



if true then {print "hi"; print "hi"} else {print "bye"; print "bye"}
(true) ? f_003 : f_004;


// for now, this will just be semantically empty
if true then (something)

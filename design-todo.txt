add types to expression

In order to check whether the function always returns the right value type... just check all returns in the function.
  we can build a function.returns vector when we create the function AST node.


TODO(BUG): The programs like `{ 1 + 1 }`, and `{ 1 + 1; 1 + 1 } don't compile
  correctly. The last line in the block is not being treated as a return
  statement. I think I probably just have to `last_to_return` on `main_fn` in
  `compiler`?

if expr is block-expr, we need to make block-expr into a void function...
  unless if-expr is returning, or using its value...

we should maybe have 2 block AST types:
  block
  block-with-value
   
TODO: fix makefile -- seems to recompile a lot of things that shouldn't need to be recompiled



TODO: add more tests (always)

TODO: ... memory management (actually free stuff lol)

implement variables
 -- variable definition
 -- variable assignment

implement type inference for variables and functions (return types)

implement type checking


change Cemitter to emit to stream argument instead of std::out

change all headers to pimpl




TODO: add some way to set syntax chars

I'm not sure if I want 'logical negation' to be represented by '!' or 'not'.
I'm thinking of including ! on ints as well as not on bools. For logic using 
ints we can just do 'if nonzero x' or something.


function syntaxes:
(1)
f : (x : int) -> (y : int) -> int = x + y if {x, y} > 0 else 0

(2)
f(x, y) = x + y if {x, y} > 0 else 0

(3)
f(x : int, y : int) -> int = { x + y if {x, y} > 0 else 0 }



if syntax:
return if true then 1 -- X malformed (need then on return) (?)

if true then 1 else false
if true then {print "hi"; 1} else {print "bye"; 2}


f_001 = {print "hi"; 1}
f_002 = {print "bye"; 2}


if true then {print "hi"; 1} else {print "bye"; 2}
(true) ? f_001() : f_002


return if true then {print "hi"; 1} else {print "bye"; 2}
return ((true) ? f_001() : f_002)



if true then {print "hi"; print "hi"} else {print "bye"; print "bye"}
(true) ? f_003 : f_004;


// for now, this will just be semantically empty
if true then (something)
